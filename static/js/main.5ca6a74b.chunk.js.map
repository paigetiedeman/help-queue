{"version":3,"sources":["components/Header.js","components/ReusableForm.js","components/NewTicketForm.js","components/Ticket.js","components/TicketList.js","components/TicketDetail.js","components/EditTicketForm.js","actions/index.js","actions/ActionTypes.js","components/TicketControl.js","components/App.js","reportWebVitals.js","reducers/index.js","reducers/form-visible-reducer.js","reducers/ticket-list-reducer.js","index.js"],"names":["Header","ReusableForm","props","Fragment","onSubmit","formSubmissionHandler","type","name","placeholder","className","buttonText","NewTicketForm","event","preventDefault","onNewTicketCreation","names","target","value","location","issue","id","v4","timeOpen","Moment","formattedWaitTime","fromNow","Ticket","onClick","whenTicketClicked","TicketList","Object","values","ticketList","map","ticket","onTicketSelection","key","TicketDetail","onClickingEdit","onClickingDelete","EditTicketForm","onEditTicket","addTicket","TicketControl","updateTicketElapsedWaitTime","dispatch","mainTicketList","forEach","newFormattedWaitTime","action","handleAddingNewTicketToList","newTicket","a","handleClick","state","selectedTicket","setState","editing","handleChangingSelectedTicket","handleDeletingTicket","handleEditClick","handleEditingTicketInList","ticketToEdit","console","log","this","waitTimeUpdateTimer","setInterval","clearInterval","currentlyVisibleState","formVisibleOnPage","React","Component","connect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","assign","newState","updatedState","store","createStore","subscribe","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ca6a74b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(){\r\n  return (\r\n    <h1>Help Queue</h1>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ReusableForm(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={props.formSubmissionHandler}>\r\n        <input\r\n          type='text'\r\n          name='names'\r\n          placeholder='Pair Names' \r\n          className='form-control'/>\r\n          <br />\r\n        <input\r\n          type='text'\r\n          name='location'\r\n          placeholder='Location' \r\n          className='form-control'/>\r\n          <br />\r\n        <textarea\r\n          name='issue'\r\n          placeholder='Describe your issue.' \r\n          className='form-control'/>\r\n          <br />\r\n        <button type='submit' className='btn btn-dark'>{props.buttonText}</button>\r\n      </form>\r\n        <br />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nReusableForm.propTypes = {\r\n  formSubmissionHandler: PropTypes.func,\r\n  buttonText: PropTypes.string\r\n};\r\n\r\nexport default ReusableForm;","import React from \"react\";\r\nimport { v4 } from 'uuid'; \r\nimport PropTypes from \"prop-types\";\r\nimport ReusableForm from \"./ReusableForm\";\r\nimport Moment from \"moment\";\r\n\r\nfunction NewTicketForm(props){\r\n  function handleNewTicketFormSubmission(event) {\r\n    event.preventDefault();\r\n    props.onNewTicketCreation({\r\n      names: event.target.names.value,\r\n      location: event.target.location.value, \r\n      issue: event.target.issue.value,\r\n      id: v4(),\r\n      timeOpen: new Moment(),\r\n      formattedWaitTime: new Moment().fromNow(true)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReusableForm \r\n        formSubmissionHandler={handleNewTicketFormSubmission}\r\n        buttonText=\"Help!\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nNewTicketForm.propTypes = {\r\n  onNewTicketCreation: PropTypes.func\r\n};\r\n\r\nexport default NewTicketForm;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Ticket(props){\r\n  return (\r\n    <React.Fragment>\r\n      <div onClick= {() => props.whenTicketClicked(props.id)}>\r\n      <h3>{props.location} - {props.names}</h3>\r\n      <p><em>{props.issue}</em></p>\r\n      <p><em>{props.formattedWaitTime}</em></p>\r\n      <hr/>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nTicket.propTypes = {\r\n  names: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  issue: PropTypes.string,\r\n  id: PropTypes.string,\r\n  whenTicketClicked: PropTypes.func,\r\n  formattedWaitTime: PropTypes.string\r\n};\r\n\r\nexport default Ticket;","import React from \"react\";\r\nimport Ticket from \"./Ticket\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TicketList(props){\r\n  return (\r\n    <React.Fragment>\r\n      <hr/>\r\n      {Object.values(props.ticketList).map((ticket) => {\r\n        return <Ticket\r\n          whenTicketClicked = { props.onTicketSelection }\r\n          names={ticket.names}\r\n          location={ticket.location}\r\n          issue={ticket.issue}\r\n          formattedWaitTime={ticket.formattedWaitTime}\r\n          id={ticket.id}\r\n          key={ticket.id}/>\r\n  })}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nTicketList.propTypes = {\r\n  ticketList: PropTypes.object,\r\n  onTicketSelection: PropTypes.func\r\n};\r\n\r\nexport default TicketList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TicketDetail(props) {\r\n  const {ticket} = props;\r\n  return (\r\n    <>\r\n    <h1>Ticket Detail</h1>\r\n    <h3>{ticket.location} - {ticket.names}</h3>\r\n    <p><em>{ticket.issue}</em></p>\r\n    <p><em>{ticket.formattedWaitTime}</em></p>\r\n    <button onClick={ props.onClickingEdit } className='btn btn-dark'>Update Ticket</button> \r\n    <button onClick={()=> props.onClickingDelete(ticket.id) } className='btn btn-dark'>Close Ticket</button>\r\n    <hr />\r\n    </>\r\n  );\r\n}\r\n\r\nTicketDetail.propTypes = {\r\n  ticket: PropTypes.object,\r\n  onClickingDelete: PropTypes.func,\r\n  onClickingEdit: PropTypes.func\r\n}\r\n\r\nexport default TicketDetail;","import React from \"react\";\r\nimport ReusableForm from \"./ReusableForm\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction EditTicketForm(props){\r\n  const { ticket } = props;\r\n\r\n  function handleEditTicketFormSubmission(event) {\r\n    event.preventDefault();\r\n    props.onEditTicket({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: ticket.id, timeOpen: ticket.timeOpen, formattedWaitTime: ticket.formattedWaitTime });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReusableForm \r\n        formSubmissionHandler={handleEditTicketFormSubmission} \r\n        buttonText=\"Update Ticket\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nEditTicketForm.propTypes = {\r\n  ticket: PropTypes.object,\r\n  onEditTicket: PropTypes.func\r\n};\r\n\r\nexport default EditTicketForm;\r\n","import * as c from './ActionTypes';\r\n\r\nexport const deleteTicket = id => ({\r\n  type: 'DELETE_TICKET',\r\n  id\r\n});\r\n\r\nexport const toggleForm = () => ({\r\n  type: 'TOGGLE_FORM'\r\n});\r\n\r\nexport const addTicket = (ticket) => {\r\n  const { names, location, issue, id, formattedWaitTime, timeOpen } = ticket;\r\n  return {\r\n    type: c.ADD_TICKET,\r\n    names: names,\r\n    location: location,\r\n    issue: issue,\r\n    id: id,\r\n    formattedWaitTime,\r\n    timeOpen: timeOpen\r\n  }\r\n}\r\nexport const updateTime = (id, formattedWaitTime) => ({\r\n  type: c.UPDATE_TIME,\r\n  id: id,\r\n  formattedWaitTime: formattedWaitTime\r\n});","export const ADD_TICKET = 'ADD_TICKET';\r\nexport const DELETE_TICKET = 'DELETE_TICKET';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const UPDATE_TIME = 'UPDATE_TIME';\r\n","import React from 'react';\r\nimport NewTicketForm from './NewTicketForm';\r\nimport TicketList from './TicketList';\r\nimport TicketDetail from './TicketDetail';\r\nimport EditTicketForm from './EditTicketForm';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from \"prop-types\";\r\nimport * as a from './../actions';\r\n\r\nclass TicketControl extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props);\r\n    this.state = {\r\n      // formVisibleOnPage: false,\r\n      selectedTicket: null,\r\n      editing: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.waitTimeUpdateTimer = setInterval(() =>\r\n      this.updateTicketElapsedWaitTime(),\r\n    60000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.waitTimeUpdateTimer);\r\n  }\r\n\r\n  updateTicketElapsedWaitTime = () => {\r\n    const { dispatch } = this.props;\r\n    Object.values(this.props.mainTicketList).forEach(ticket => {\r\n      const newFormattedWaitTime = ticket.timeOpen.fromNow(true);\r\n      const action = a.updateTime(ticket.id, newFormattedWaitTime);\r\n      dispatch(action);\r\n    });\r\n  }\r\n  \r\n  handleAddingNewTicketToList = (newTicket) => {\r\n    const { dispatch } = this.props;\r\n    const action = a.addTicket(newTicket);\r\n    dispatch(action);\r\n    const action2 = a.toggleForm();\r\n    dispatch(action2);\r\n  }\r\n\r\n  handleClick = () => {\r\n    if (this.state.selectedTicket != null) {\r\n      this.setState({\r\n        selectedTicket: null,\r\n        editing: false\r\n      });\r\n    } else {\r\n      const { dispatch } = this.props;\r\n      const action = a.toggleForm();\r\n      dispatch(action);\r\n    }\r\n  }\r\n\r\n  handleChangingSelectedTicket = (id) => {\r\n    const selectedTicket = this.props.mainTicketList[id];\r\n    this.setState({selectedTicket: selectedTicket});\r\n  }\r\n\r\n  handleDeletingTicket = (id) => {\r\n    const { dispatch } = this.props;\r\n    const action = a.deleteTicket(id);\r\n    dispatch(action);\r\n    this.setState({selectedTicket: null});\r\n  }\r\n\r\n    handleEditClick = () => {\r\n      this.setState({editing: true});\r\n    }\r\n\r\n    handleEditingTicketInList = (ticketToEdit) => {\r\n      const { dispatch } = this.props;\r\n      const action = a.addTicket(ticketToEdit);\r\n      dispatch(action);\r\n      this.setState({\r\n        editing: false,\r\n        selectedTicket: null\r\n      });\r\n    }\r\n\r\n  render(){\r\n    let currentlyVisibleState = null;\r\n    let buttonText = null; // new code\r\n    if (this.state.editing) {\r\n      currentlyVisibleState = <EditTicketForm ticket = {this.state.selectedTicket} onEditTicket = {this.handleEditingTicketInList} />\r\n      buttonText = \"Return to Ticket List\";\r\n    } else if (this.state.selectedTicket != null) {\r\n      currentlyVisibleState = <TicketDetail ticket = {this.state.selectedTicket} onClickingDelete = {this.handleDeletingTicket} onClickingEdit = {this.handleEditClick}/>\r\n      buttonText = \"Return to Ticket List\";\r\n    } else if (this.props.formVisibleOnPage){\r\n      currentlyVisibleState = <NewTicketForm onNewTicketCreation={this.handleAddingNewTicketToList}/>\r\n      buttonText = \"Return to Ticket List\"; \r\n    } else {\r\n      currentlyVisibleState = <TicketList ticketList={this.props.mainTicketList} onTicketSelection={this.handleChangingSelectedTicket} />;\r\n      buttonText = \"Add Ticket\";\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {currentlyVisibleState}\r\n        <button onClick={this.handleClick} className='btn btn-dark'>{buttonText}</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTicketControl.propTypes = {\r\n  mainTicketList: PropTypes.object,\r\n  formVisibleOnPage: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    mainTicketList: state.mainTicketList,\r\n    formVisibleOnPage: state.formVisibleOnPage\r\n  }\r\n}\r\n\r\nTicketControl = connect(mapStateToProps)(TicketControl);\r\n\r\nexport default TicketControl;","import React from \"react\";\nimport Header from \"./Header\";\nimport TicketControl from \"./TicketControl\";\n\nfunction App(){\n  return ( \n    <div className=\"container\">\n      <React.Fragment>\n        <Header />\n        <TicketControl />\n      </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import formVisibleReducer from './form-visible-reducer';\r\nimport ticketListReducer from './ticket-list-reducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n  formVisibleOnPage: formVisibleReducer,\r\n  mainTicketList: ticketListReducer\r\n});\r\n\r\nexport default rootReducer;","import * as c from './../actions/ActionTypes';\r\n\r\nexport default (state = false, action) => {\r\n  switch (action.type) {\r\n    case c.TOGGLE_FORM:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};","import * as c from './../actions/ActionTypes';\r\n\r\nexport default (state = {}, action) => {\r\n  const { names, location, issue, id, formattedWaitTime, timeOpen } = action;\r\n  switch (action.type) {\r\n  case c.ADD_TICKET:\r\n    return Object.assign({}, state, {\r\n      [id]: {\r\n        names: names,\r\n        location: location,\r\n        issue: issue,\r\n        id: id,\r\n        timeOpen: timeOpen,\r\n        formattedWaitTime: formattedWaitTime\r\n      }\r\n    });\r\n  case c.DELETE_TICKET:\r\n    let newState = { ...state };\r\n    delete newState[id];\r\n    return newState;\r\n  case c.UPDATE_TIME:\r\n    const newTicket = Object.assign({}, state[id], {formattedWaitTime});\r\n    const updatedState = Object.assign({}, state, {\r\n      [id]: newTicket\r\n    });\r\n    return updatedState;\r\n  default:\r\n    return state;\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/index';\n\nconst store = createStore(rootReducer);\n\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}