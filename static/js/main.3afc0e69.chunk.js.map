{"version":3,"sources":["components/Header.js","components/ReusableForm.js","components/NewTicketForm.js","components/Ticket.js","components/TicketList.js","components/TicketDetail.js","components/EditTicketForm.js","components/TicketControl.js","actions/index.js","actions/ActionTypes.js","components/Signin.js","components/App.js","reportWebVitals.js","reducers/index.js","reducers/form-visible-reducer.js","reducers/ticket-list-reducer.js","firebase.js","index.js"],"names":["Header","Fragment","to","ReusableForm","props","onSubmit","formSubmissionHandler","type","name","placeholder","className","buttonText","NewTicketForm","firestore","useFirestore","event","preventDefault","onNewTicketCreation","collection","add","names","target","value","location","issue","timeOpen","FieldValue","serverTimestamp","Ticket","onClick","whenTicketClicked","id","formattedWaitTime","TicketList","useFirestoreConnect","tickets","useSelector","state","ordered","isLoaded","map","ticket","onTicketSelection","key","TicketDetail","onClickingEdit","onClickingDelete","EditTicketForm","onEditTicket","propertiesToUpdate","update","doc","TicketControl","updateTicketElapsedWaitTime","dispatch","Object","values","mainTicketList","forEach","newFormattedWaitTime","fromNow","action","handleAddingNewTicketToList","newTicket","handleClick","selectedTicket","setState","editing","handleChangingSelectedTicket","get","then","firestoreTicket","handleDeletingTicket","delete","handleEditClick","handleEditingTicketInList","console","log","this","waitTimeUpdateTimer","setInterval","clearInterval","auth","firebase","currentUser","currentlyVisibleState","formVisibleOnPage","ticketList","React","Component","connect","withFirestore","Signin","email","password","createUserWithEmailAndPassword","catch","error","message","signinEmail","signinPassword","signInWithEmailAndPassword","signOut","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","newState","updatedTicket","assign","updatedState","firestoreReducer","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_FIREBASE_SENDER_ID","appId","store","createStore","subscribe","getState","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3afc0e69.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header(){\r\n  return (\r\n    <React.Fragment>\r\n    <h1> Help Queue</h1>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/signin\">Sign In</Link>\r\n      </li>\r\n    </ul>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ReusableForm(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={props.formSubmissionHandler}>\r\n        <input\r\n          type='text'\r\n          name='names'\r\n          placeholder='Pair Names' \r\n          className='form-control'/>\r\n          <br />\r\n        <input\r\n          type='text'\r\n          name='location'\r\n          placeholder='Location' \r\n          className='form-control'/>\r\n          <br />\r\n        <textarea\r\n          name='issue'\r\n          placeholder='Describe your issue.' \r\n          className='form-control'/>\r\n          <br />\r\n        <button type='submit' className='btn btn-dark'>{props.buttonText}</button>\r\n      </form>\r\n        <br />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nReusableForm.propTypes = {\r\n  formSubmissionHandler: PropTypes.func,\r\n  buttonText: PropTypes.string\r\n};\r\n\r\nexport default ReusableForm;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReusableForm from \"./ReusableForm\";\r\nimport { useFirestore } from 'react-redux-firebase';\r\n\r\nfunction NewTicketForm(props){\r\n\r\n  const firestore = useFirestore();\r\n\r\n  function addTicketToFirestore(event) {\r\n    event.preventDefault();\r\n    props.onNewTicketCreation();\r\n    \r\n    return firestore.collection('tickets').add ({\r\n      names: event.target.names.value,\r\n      location: event.target.location.value, \r\n      issue: event.target.issue.value,\r\n      timeOpen: firestore.FieldValue.serverTimestamp()\r\n      \r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReusableForm \r\n        formSubmissionHandler={addTicketToFirestore}\r\n        buttonText=\"Help!\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nNewTicketForm.propTypes = {\r\n  onNewTicketCreation: PropTypes.func\r\n};\r\n\r\nexport default NewTicketForm;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Ticket(props){\r\n  return (\r\n    <React.Fragment>\r\n      <div onClick= {() => props.whenTicketClicked(props.id)}>\r\n      <h3>{props.location} - {props.names}</h3>\r\n      <p><em>{props.issue}</em></p>\r\n      <p><em>{props.formattedWaitTime}</em></p>\r\n      <hr/>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nTicket.propTypes = {\r\n  names: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  issue: PropTypes.string,\r\n  id: PropTypes.string,\r\n  whenTicketClicked: PropTypes.func,\r\n  formattedWaitTime: PropTypes.string\r\n};\r\n\r\nexport default Ticket;","import React from \"react\";\r\nimport Ticket from \"./Ticket\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from 'react-redux'\r\nimport { useFirestoreConnect, isLoaded, isEmpty } from 'react-redux-firebase'\r\n\r\nfunction TicketList(props){\r\n\r\n  useFirestoreConnect([\r\n    { collection: 'tickets' }\r\n  ]);\r\n\r\n  const tickets = useSelector(state => state.firestore.ordered.tickets)\r\n\r\n  if (isLoaded(tickets)) {\r\n    return (\r\n      <React.Fragment>\r\n        <hr/>\r\n        {tickets.map((ticket) => {\r\n          return <Ticket\r\n            whenTicketClicked = { props.onTicketSelection }\r\n            names={ticket.names}\r\n            location={ticket.location}\r\n            issue={ticket.issue}\r\n            formattedWaitTime={ticket.formattedWaitTime}\r\n            id={ticket.id}\r\n            key={ticket.id}/>\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        <h3>Loading...</h3>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nTicketList.propTypes = {\r\n  onTicketSelection: PropTypes.func\r\n};\r\n\r\nexport default TicketList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TicketDetail(props) {\r\n  const {ticket} = props;\r\n  return (\r\n    <>\r\n    <h1>Ticket Detail</h1>\r\n    <h3>{ticket.location} - {ticket.names}</h3>\r\n    <p><em>{ticket.issue}</em></p>\r\n    <p><em>{ticket.formattedWaitTime}</em></p>\r\n    <button onClick={ props.onClickingEdit } className='btn btn-dark'>Update Ticket</button> \r\n    <button onClick={()=> props.onClickingDelete(ticket.id) } className='btn btn-dark'>Close Ticket</button>\r\n    <hr />\r\n    </>\r\n  );\r\n}\r\n\r\nTicketDetail.propTypes = {\r\n  ticket: PropTypes.object,\r\n  onClickingDelete: PropTypes.func,\r\n  onClickingEdit: PropTypes.func\r\n}\r\n\r\nexport default TicketDetail;","import React from \"react\";\r\nimport ReusableForm from \"./ReusableForm\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useFirestore } from 'react-redux-firebase';\r\n\r\nfunction EditTicketForm(props){\r\n\r\n  const firestore = useFirestore();\r\n\r\n  const { ticket } = props;\r\n\r\n  function handleEditTicketFormSubmission(event) {\r\n    event.preventDefault();\r\n    props.onEditTicket();\r\n    const propertiesToUpdate = {\r\n      names: event.target.names.value,\r\n      location: event.target.location.value,\r\n      issue: event.target.issue.value\r\n    }\r\n    return firestore.update({collection: 'tickets', doc: ticket.id }, propertiesToUpdate)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReusableForm \r\n        formSubmissionHandler={handleEditTicketFormSubmission} \r\n        buttonText=\"Update Ticket\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nEditTicketForm.propTypes = {\r\n  ticket: PropTypes.object,\r\n  onEditTicket: PropTypes.func\r\n};\r\n\r\nexport default EditTicketForm;\r\n","import React from 'react';\r\nimport NewTicketForm from './NewTicketForm';\r\nimport TicketList from './TicketList';\r\nimport TicketDetail from './TicketDetail';\r\nimport EditTicketForm from './EditTicketForm';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from \"prop-types\";\r\nimport * as a from './../actions';\r\nimport { withFirestore, isLoaded } from 'react-redux-firebase'\r\n\r\nclass TicketControl extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props);\r\n    this.state = {\r\n      selectedTicket: null,\r\n      editing: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.waitTimeUpdateTimer = setInterval(() =>\r\n      this.updateTicketElapsedWaitTime(),\r\n    60000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.waitTimeUpdateTimer);\r\n  }\r\n\r\n  updateTicketElapsedWaitTime = () => {\r\n    const { dispatch } = this.props;\r\n    Object.values(this.props.mainTicketList).forEach(ticket => {\r\n      const newFormattedWaitTime = ticket.timeOpen.fromNow(true);\r\n      const action = a.updateTime(ticket.id, newFormattedWaitTime);\r\n      dispatch(action);\r\n    });\r\n  }\r\n  \r\n  handleAddingNewTicketToList = (newTicket) => {\r\n    const { dispatch } = this.props;\r\n    const action = a.toggleForm();\r\n    dispatch(action);\r\n  }\r\n\r\n  handleClick = () => {\r\n    if (this.state.selectedTicket != null) {\r\n      this.setState({\r\n        selectedTicket: null,\r\n        editing: false\r\n      });\r\n    } else {\r\n      const { dispatch } = this.props;\r\n      const action = a.toggleForm();\r\n      dispatch(action);\r\n    }\r\n  }\r\n\r\n  handleChangingSelectedTicket = (id) => {\r\n    this.props.firestore.get({collection: 'tickets', doc: id}).then((ticket) => {\r\n      const firestoreTicket = {\r\n        names: ticket.get(\"names\"),\r\n        location: ticket.get(\"location\"),\r\n        issue: ticket.get(\"issue\"),\r\n        id: ticket.id\r\n      }\r\n      this.setState({selectedTicket: firestoreTicket });\r\n    });\r\n  }\r\n\r\n  handleDeletingTicket = (id) => {\r\n    this.props.firestore.delete({collection: 'tickets', doc: id});\r\n    this.setState({selectedTicket: null});\r\n  }\r\n\r\n    handleEditClick = () => {\r\n      this.setState({editing: true});\r\n    }\r\n\r\n    handleEditingTicketInList = () => {\r\n      this.setState({\r\n        editing: false,\r\n        selectedTicket: null\r\n      });\r\n    }\r\n\r\n  render(){\r\n    const auth = this.props.firebase.auth();\r\n  if (!isLoaded(auth)) {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Loading...</h1>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  if ((isLoaded(auth)) && (auth.currentUser == null)) {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>You must be signed in to access the queue.</h1>\r\n      </React.Fragment>\r\n    )\r\n  } \r\n    if ((isLoaded(auth)) && (auth.currentUser != null)) {\r\n      let currentlyVisibleState = null;\r\n      let buttonText = null; \r\n      if (this.state.editing) {\r\n        currentlyVisibleState = <EditTicketForm ticket = {this.state.selectedTicket} onEditTicket = {this.handleEditingTicketInList} />\r\n        buttonText = \"Return to Ticket List\";\r\n      } else if (this.state.selectedTicket != null) {\r\n        currentlyVisibleState = <TicketDetail ticket = {this.state.selectedTicket} onClickingDelete = {this.handleDeletingTicket} onClickingEdit = {this.handleEditClick}/>\r\n        buttonText = \"Return to Ticket List\";\r\n      } else if (this.props.formVisibleOnPage){\r\n        currentlyVisibleState = <NewTicketForm onNewTicketCreation={this.handleAddingNewTicketToList}/>\r\n        buttonText = \"Return to Ticket List\"; \r\n      } else {\r\n        currentlyVisibleState = <TicketList ticketList={this.props.mainTicketList} onTicketSelection={this.handleChangingSelectedTicket} />;\r\n        buttonText = \"Add Ticket\";\r\n      }\r\n      return (\r\n        <React.Fragment>\r\n          {currentlyVisibleState}\r\n          <button onClick={this.handleClick} className='btn btn-dark'>{buttonText}</button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nTicketControl.propTypes = {\r\n  mainTicketList: PropTypes.object,\r\n  formVisibleOnPage: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    mainTicketList: state.mainTicketList,\r\n    formVisibleOnPage: state.formVisibleOnPage\r\n  }\r\n}\r\n\r\nTicketControl = connect(mapStateToProps)(TicketControl);\r\n\r\nexport default withFirestore(TicketControl);","import * as c from './ActionTypes';\r\n\r\nexport const deleteTicket = (id) => ({\r\n  type: c.DELETE_TICKET,\r\n  id\r\n});\r\n\r\nexport const toggleForm = () => ({\r\n  type: 'TOGGLE_FORM'\r\n});\r\n\r\nexport const updateTime = (id, formattedWaitTime) => ({\r\n  type: c.UPDATE_TIME,\r\n  id: id,\r\n  formattedWaitTime: formattedWaitTime\r\n});","export const DELETE_TICKET = 'DELETE_TICKET';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const UPDATE_TIME = 'UPDATE_TIME';\r\n","import React from 'react'\r\nimport firebase from \"firebase/app\";\r\n\r\nexport default function Signin() {\r\n\r\n  function doSignUp(event) {\r\n    event.preventDefault();\r\n    const email = event.target.email.value;\r\n    const password = event.target.password.value;\r\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(function(){\r\n      console.log(\"successfully signed up!\");\r\n    }).catch(function(error) {\r\n      console.log(error.message);\r\n    });\r\n  }\r\n\r\n  function doSignIn(event) {\r\n    event.preventDefault();\r\n    const email = event.target.signinEmail.value;\r\n    const password = event.target.signinPassword.value;\r\n    firebase.auth().signInWithEmailAndPassword(email, password).then(function() {\r\n      console.log(\"Successfully signed in!\");\r\n    }).catch(function(error) {\r\n      console.log(error.message);\r\n    });\r\n  }\r\n\r\n  function doSignOut() {\r\n    firebase.auth().signOut().then(function() {\r\n      console.log(\"Successfully signed out!\");\r\n    }).catch(function(error) {\r\n      console.log(error.message);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <h1>Sign up</h1>\r\n    <form onSubmit={doSignUp}>\r\n      <input\r\n        type='text'\r\n        name='email'\r\n        placeholder='email' \r\n        className='form-control'/>\r\n        <br />\r\n      <input\r\n        type='password'\r\n        name='password'\r\n        placeholder='Password' \r\n        className='form-control'/>\r\n        <br />\r\n      <button type='submit' className=\"btn btn-dark\">Sign up</button>\r\n    </form>\r\n    <h1>Sign In</h1>\r\n    <form onSubmit={doSignIn}>\r\n      <input\r\n        type='text'\r\n        name='signinEmail'\r\n        placeholder='email' \r\n        className='form-control'/>\r\n        <br />\r\n      <input\r\n        type='password'\r\n        name='signinPassword'\r\n        placeholder='Password' \r\n        className='form-control'/>\r\n        <br />\r\n      <button type='submit' className=\"btn btn-dark\">Sign In</button>\r\n      </form>\r\n      <button onClick={doSignOut} className=\"btn btn-dark\">Sign out</button>\r\n    <br />\r\n  </React.Fragment>\r\n  )\r\n}\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport TicketControl from \"./TicketControl\";\nimport Signin from \"./Signin\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App(){\n  return ( \n    <div className=\"container\">\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/signin\">\n          <Signin />\n        </Route>\n        <Route path=\"/\">\n          <TicketControl />\n        </Route>\n      </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import formVisibleReducer from './form-visible-reducer';\r\nimport ticketListReducer from './ticket-list-reducer';\r\nimport { combineReducers } from 'redux';\r\nimport { firestoreReducer } from 'redux-firestore';\r\n\r\nconst rootReducer = combineReducers({\r\n  formVisibleOnPage: formVisibleReducer,\r\n  mainTicketList: ticketListReducer,\r\n  firestore: firestoreReducer\r\n});\r\n\r\nexport default rootReducer;","import * as c from './../actions/ActionTypes';\r\n\r\nexport default (state = false, action) => {\r\n  switch (action.type) {\r\n    case c.TOGGLE_FORM:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};","import * as c from './../actions/ActionTypes';\r\n\r\nexport default (state = {}, action) => {\r\n  const { id, formattedWaitTime } = action;\r\n  switch (action.type) {\r\n  // case 'ADD_TICKET':\r\n  //   return Object.assign({}, state, {\r\n  //     [id]: {\r\n  //       names: names,\r\n  //       location: location,\r\n  //       issue: issue,\r\n  //       id: id\r\n  //     }\r\n  //   });\r\n  case c.DELETE_TICKET:\r\n    const newState = { ...state };\r\n    delete newState[id];\r\n    return newState;\r\n  case c.UPDATE_TIME:\r\n    const updatedTicket = Object.assign({}, state[id], {formattedWaitTime});\r\n    const updatedState = Object.assign({}, state, {\r\n      [id]: updatedTicket\r\n    });\r\n    return updatedState;\r\n  default:\r\n    return state;\r\n  }\r\n};","import * as firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID \r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.firestore();\r\n\r\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/index';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\nimport firebase from \"./firebase\";\nimport 'firebase/auth';\n\nconst store = createStore(rootReducer);\n\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\nconst rrfProps = {\n  firebase,\n  config: {\n        userProfile: \"users\",\n        useFirestoreForProfile: true\n    },\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n    <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}